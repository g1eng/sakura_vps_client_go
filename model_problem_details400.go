/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
)

// checks if the ProblemDetails400 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetails400{}

// ProblemDetails400 struct for ProblemDetails400
type ProblemDetails400 struct {
	// エラー内容を示す簡潔な識別子 * `invalid` - 不正なリクエスト値,リクエスト値が妥当でない * `parse_error` - 不正な形式,リクエスト値を読み取ることができない * `bad_request` - リクエストの内容に何らかの問題がある
	Code *string `json:"code,omitempty"`
	// エラーの内容
	Message *string `json:"message,omitempty"`
	Errors NullableProblemDetails400Errors `json:"errors,omitempty"`
}

// NewProblemDetails400 instantiates a new ProblemDetails400 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetails400() *ProblemDetails400 {
	this := ProblemDetails400{}
	return &this
}

// NewProblemDetails400WithDefaults instantiates a new ProblemDetails400 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetails400WithDefaults() *ProblemDetails400 {
	this := ProblemDetails400{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ProblemDetails400) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetails400) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ProblemDetails400) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ProblemDetails400) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProblemDetails400) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetails400) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProblemDetails400) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProblemDetails400) SetMessage(v string) {
	o.Message = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProblemDetails400) GetErrors() ProblemDetails400Errors {
	if o == nil || IsNil(o.Errors.Get()) {
		var ret ProblemDetails400Errors
		return ret
	}
	return *o.Errors.Get()
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProblemDetails400) GetErrorsOk() (*ProblemDetails400Errors, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors.Get(), o.Errors.IsSet()
}

// HasErrors returns a boolean if a field has been set.
func (o *ProblemDetails400) HasErrors() bool {
	if o != nil && o.Errors.IsSet() {
		return true
	}

	return false
}

// SetErrors gets a reference to the given NullableProblemDetails400Errors and assigns it to the Errors field.
func (o *ProblemDetails400) SetErrors(v ProblemDetails400Errors) {
	o.Errors.Set(&v)
}
// SetErrorsNil sets the value for Errors to be an explicit nil
func (o *ProblemDetails400) SetErrorsNil() {
	o.Errors.Set(nil)
}

// UnsetErrors ensures that no value is present for Errors, not even an explicit nil
func (o *ProblemDetails400) UnsetErrors() {
	o.Errors.Unset()
}

func (o ProblemDetails400) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetails400) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if o.Errors.IsSet() {
		toSerialize["errors"] = o.Errors.Get()
	}
	return toSerialize, nil
}

type NullableProblemDetails400 struct {
	value *ProblemDetails400
	isSet bool
}

func (v NullableProblemDetails400) Get() *ProblemDetails400 {
	return v.value
}

func (v *NullableProblemDetails400) Set(val *ProblemDetails400) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetails400) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetails400) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetails400(val *ProblemDetails400) *NullableProblemDetails400 {
	return &NullableProblemDetails400{value: val, isSet: true}
}

func (v NullableProblemDetails400) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetails400) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


