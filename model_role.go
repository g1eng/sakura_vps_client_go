/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Role type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Role{}

// Role struct for Role
type Role struct {
	// id
	Id int32 `json:"id"`
	// 名前
	Name string `json:"name"`
	// 説明
	Description string `json:"description"`
	// 利用できる権限を制限するか
	PermissionFiltering string `json:"permission_filtering"`
	// 利用できる権限。permission_filteringがenabledの場合のみ指定可能。**権限の一覧を取得する**`/permissions`のcode値を指定します。
	AllowedPermissions []string `json:"allowed_permissions"`
	// 利用できるリソースを制限するか
	ResourceFiltering string `json:"resource_filtering"`
	AllowedResources NullableRoleAllowedResources `json:"allowed_resources"`
}

type _Role Role

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(id int32, name string, description string, permissionFiltering string, allowedPermissions []string, resourceFiltering string, allowedResources NullableRoleAllowedResources) *Role {
	this := Role{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.PermissionFiltering = permissionFiltering
	this.AllowedPermissions = allowedPermissions
	this.ResourceFiltering = resourceFiltering
	this.AllowedResources = allowedResources
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetId returns the Id field value
func (o *Role) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Role) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Role) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Role) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Role) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Role) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Role) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Role) SetDescription(v string) {
	o.Description = v
}

// GetPermissionFiltering returns the PermissionFiltering field value
func (o *Role) GetPermissionFiltering() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermissionFiltering
}

// GetPermissionFilteringOk returns a tuple with the PermissionFiltering field value
// and a boolean to check if the value has been set.
func (o *Role) GetPermissionFilteringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionFiltering, true
}

// SetPermissionFiltering sets field value
func (o *Role) SetPermissionFiltering(v string) {
	o.PermissionFiltering = v
}

// GetAllowedPermissions returns the AllowedPermissions field value
func (o *Role) GetAllowedPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedPermissions
}

// GetAllowedPermissionsOk returns a tuple with the AllowedPermissions field value
// and a boolean to check if the value has been set.
func (o *Role) GetAllowedPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedPermissions, true
}

// SetAllowedPermissions sets field value
func (o *Role) SetAllowedPermissions(v []string) {
	o.AllowedPermissions = v
}

// GetResourceFiltering returns the ResourceFiltering field value
func (o *Role) GetResourceFiltering() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceFiltering
}

// GetResourceFilteringOk returns a tuple with the ResourceFiltering field value
// and a boolean to check if the value has been set.
func (o *Role) GetResourceFilteringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceFiltering, true
}

// SetResourceFiltering sets field value
func (o *Role) SetResourceFiltering(v string) {
	o.ResourceFiltering = v
}

// GetAllowedResources returns the AllowedResources field value
// If the value is explicit nil, the zero value for RoleAllowedResources will be returned
func (o *Role) GetAllowedResources() RoleAllowedResources {
	if o == nil || o.AllowedResources.Get() == nil {
		var ret RoleAllowedResources
		return ret
	}

	return *o.AllowedResources.Get()
}

// GetAllowedResourcesOk returns a tuple with the AllowedResources field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetAllowedResourcesOk() (*RoleAllowedResources, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedResources.Get(), o.AllowedResources.IsSet()
}

// SetAllowedResources sets field value
func (o *Role) SetAllowedResources(v RoleAllowedResources) {
	o.AllowedResources.Set(&v)
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Role) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["permission_filtering"] = o.PermissionFiltering
	toSerialize["allowed_permissions"] = o.AllowedPermissions
	toSerialize["resource_filtering"] = o.ResourceFiltering
	toSerialize["allowed_resources"] = o.AllowedResources.Get()
	return toSerialize, nil
}

func (o *Role) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"permission_filtering",
		"allowed_permissions",
		"resource_filtering",
		"allowed_resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRole := _Role{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRole)

	if err != nil {
		return err
	}

	*o = Role(varRole)

	return err
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


