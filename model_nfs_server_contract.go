/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NfsServerContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsServerContract{}

// NfsServerContract 契約情報
type NfsServerContract struct {
	// プランコード
	PlanCode int32 `json:"plan_code"`
	// プラン名
	PlanName string `json:"plan_name"`
	// サービスコード
	ServiceCode string `json:"service_code"`
}

type _NfsServerContract NfsServerContract

// NewNfsServerContract instantiates a new NfsServerContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsServerContract(planCode int32, planName string, serviceCode string) *NfsServerContract {
	this := NfsServerContract{}
	this.PlanCode = planCode
	this.PlanName = planName
	this.ServiceCode = serviceCode
	return &this
}

// NewNfsServerContractWithDefaults instantiates a new NfsServerContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsServerContractWithDefaults() *NfsServerContract {
	this := NfsServerContract{}
	return &this
}

// GetPlanCode returns the PlanCode field value
func (o *NfsServerContract) GetPlanCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlanCode
}

// GetPlanCodeOk returns a tuple with the PlanCode field value
// and a boolean to check if the value has been set.
func (o *NfsServerContract) GetPlanCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanCode, true
}

// SetPlanCode sets field value
func (o *NfsServerContract) SetPlanCode(v int32) {
	o.PlanCode = v
}

// GetPlanName returns the PlanName field value
func (o *NfsServerContract) GetPlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value
// and a boolean to check if the value has been set.
func (o *NfsServerContract) GetPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanName, true
}

// SetPlanName sets field value
func (o *NfsServerContract) SetPlanName(v string) {
	o.PlanName = v
}

// GetServiceCode returns the ServiceCode field value
func (o *NfsServerContract) GetServiceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceCode
}

// GetServiceCodeOk returns a tuple with the ServiceCode field value
// and a boolean to check if the value has been set.
func (o *NfsServerContract) GetServiceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceCode, true
}

// SetServiceCode sets field value
func (o *NfsServerContract) SetServiceCode(v string) {
	o.ServiceCode = v
}

func (o NfsServerContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsServerContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plan_code"] = o.PlanCode
	toSerialize["plan_name"] = o.PlanName
	toSerialize["service_code"] = o.ServiceCode
	return toSerialize, nil
}

func (o *NfsServerContract) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan_code",
		"plan_name",
		"service_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNfsServerContract := _NfsServerContract{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNfsServerContract)

	if err != nil {
		return err
	}

	*o = NfsServerContract(varNfsServerContract)

	return err
}

type NullableNfsServerContract struct {
	value *NfsServerContract
	isSet bool
}

func (v NullableNfsServerContract) Get() *NfsServerContract {
	return v.value
}

func (v *NullableNfsServerContract) Set(val *NfsServerContract) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsServerContract) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsServerContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsServerContract(val *NfsServerContract) *NullableNfsServerContract {
	return &NullableNfsServerContract{value: val, isSet: true}
}

func (v NullableNfsServerContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsServerContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


