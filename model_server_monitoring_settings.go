/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerMonitoringSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerMonitoringSettings{}

// ServerMonitoringSettings struct for ServerMonitoringSettings
type ServerMonitoringSettings struct {
	// 監視のON/OFF * true 監視ON * false 監視OFF
	Enabled bool `json:"enabled"`
	HealthCheck ServerMonitoringSettingsHealthCheck `json:"health_check"`
	Notification ServerMonitoringSettingsNotification `json:"notification"`
}

type _ServerMonitoringSettings ServerMonitoringSettings

// NewServerMonitoringSettings instantiates a new ServerMonitoringSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerMonitoringSettings(enabled bool, healthCheck ServerMonitoringSettingsHealthCheck, notification ServerMonitoringSettingsNotification) *ServerMonitoringSettings {
	this := ServerMonitoringSettings{}
	this.Enabled = enabled
	this.HealthCheck = healthCheck
	this.Notification = notification
	return &this
}

// NewServerMonitoringSettingsWithDefaults instantiates a new ServerMonitoringSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerMonitoringSettingsWithDefaults() *ServerMonitoringSettings {
	this := ServerMonitoringSettings{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ServerMonitoringSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ServerMonitoringSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ServerMonitoringSettings) SetEnabled(v bool) {
	o.Enabled = v
}

// GetHealthCheck returns the HealthCheck field value
func (o *ServerMonitoringSettings) GetHealthCheck() ServerMonitoringSettingsHealthCheck {
	if o == nil {
		var ret ServerMonitoringSettingsHealthCheck
		return ret
	}

	return o.HealthCheck
}

// GetHealthCheckOk returns a tuple with the HealthCheck field value
// and a boolean to check if the value has been set.
func (o *ServerMonitoringSettings) GetHealthCheckOk() (*ServerMonitoringSettingsHealthCheck, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthCheck, true
}

// SetHealthCheck sets field value
func (o *ServerMonitoringSettings) SetHealthCheck(v ServerMonitoringSettingsHealthCheck) {
	o.HealthCheck = v
}

// GetNotification returns the Notification field value
func (o *ServerMonitoringSettings) GetNotification() ServerMonitoringSettingsNotification {
	if o == nil {
		var ret ServerMonitoringSettingsNotification
		return ret
	}

	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value
// and a boolean to check if the value has been set.
func (o *ServerMonitoringSettings) GetNotificationOk() (*ServerMonitoringSettingsNotification, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Notification, true
}

// SetNotification sets field value
func (o *ServerMonitoringSettings) SetNotification(v ServerMonitoringSettingsNotification) {
	o.Notification = v
}

func (o ServerMonitoringSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerMonitoringSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["health_check"] = o.HealthCheck
	toSerialize["notification"] = o.Notification
	return toSerialize, nil
}

func (o *ServerMonitoringSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"health_check",
		"notification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerMonitoringSettings := _ServerMonitoringSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerMonitoringSettings)

	if err != nil {
		return err
	}

	*o = ServerMonitoringSettings(varServerMonitoringSettings)

	return err
}

type NullableServerMonitoringSettings struct {
	value *ServerMonitoringSettings
	isSet bool
}

func (v NullableServerMonitoringSettings) Get() *ServerMonitoringSettings {
	return v.value
}

func (v *NullableServerMonitoringSettings) Set(val *ServerMonitoringSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableServerMonitoringSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableServerMonitoringSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerMonitoringSettings(val *ServerMonitoringSettings) *NullableServerMonitoringSettings {
	return &NullableServerMonitoringSettings{value: val, isSet: true}
}

func (v NullableServerMonitoringSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerMonitoringSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


