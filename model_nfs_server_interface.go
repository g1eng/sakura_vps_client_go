/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NfsServerInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsServerInterface{}

// NfsServerInterface struct for NfsServerInterface
type NfsServerInterface struct {
	// id
	Id int32 `json:"id"`
	// NIC名称
	Device string `json:"device"`
	// インターフェースの接続先
	ConnectTo NullableString `json:"connect_to"`
	// MACアドレス
	Mac string `json:"mac"`
	// スイッチID
	SwitchId NullableInt32 `json:"switch_id"`
}

type _NfsServerInterface NfsServerInterface

// NewNfsServerInterface instantiates a new NfsServerInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsServerInterface(id int32, device string, connectTo NullableString, mac string, switchId NullableInt32) *NfsServerInterface {
	this := NfsServerInterface{}
	this.Id = id
	this.Device = device
	this.ConnectTo = connectTo
	this.Mac = mac
	this.SwitchId = switchId
	return &this
}

// NewNfsServerInterfaceWithDefaults instantiates a new NfsServerInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsServerInterfaceWithDefaults() *NfsServerInterface {
	this := NfsServerInterface{}
	return &this
}

// GetId returns the Id field value
func (o *NfsServerInterface) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NfsServerInterface) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NfsServerInterface) SetId(v int32) {
	o.Id = v
}

// GetDevice returns the Device field value
func (o *NfsServerInterface) GetDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *NfsServerInterface) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *NfsServerInterface) SetDevice(v string) {
	o.Device = v
}

// GetConnectTo returns the ConnectTo field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NfsServerInterface) GetConnectTo() string {
	if o == nil || o.ConnectTo.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConnectTo.Get()
}

// GetConnectToOk returns a tuple with the ConnectTo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsServerInterface) GetConnectToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectTo.Get(), o.ConnectTo.IsSet()
}

// SetConnectTo sets field value
func (o *NfsServerInterface) SetConnectTo(v string) {
	o.ConnectTo.Set(&v)
}

// GetMac returns the Mac field value
func (o *NfsServerInterface) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *NfsServerInterface) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *NfsServerInterface) SetMac(v string) {
	o.Mac = v
}

// GetSwitchId returns the SwitchId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *NfsServerInterface) GetSwitchId() int32 {
	if o == nil || o.SwitchId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.SwitchId.Get()
}

// GetSwitchIdOk returns a tuple with the SwitchId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsServerInterface) GetSwitchIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwitchId.Get(), o.SwitchId.IsSet()
}

// SetSwitchId sets field value
func (o *NfsServerInterface) SetSwitchId(v int32) {
	o.SwitchId.Set(&v)
}

func (o NfsServerInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsServerInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["device"] = o.Device
	toSerialize["connect_to"] = o.ConnectTo.Get()
	toSerialize["mac"] = o.Mac
	toSerialize["switch_id"] = o.SwitchId.Get()
	return toSerialize, nil
}

func (o *NfsServerInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"device",
		"connect_to",
		"mac",
		"switch_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNfsServerInterface := _NfsServerInterface{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNfsServerInterface)

	if err != nil {
		return err
	}

	*o = NfsServerInterface(varNfsServerInterface)

	return err
}

type NullableNfsServerInterface struct {
	value *NfsServerInterface
	isSet bool
}

func (v NullableNfsServerInterface) Get() *NfsServerInterface {
	return v.value
}

func (v *NullableNfsServerInterface) Set(val *NfsServerInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsServerInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsServerInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsServerInterface(val *NfsServerInterface) *NullableNfsServerInterface {
	return &NullableNfsServerInterface{value: val, isSet: true}
}

func (v NullableNfsServerInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsServerInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


