/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Zone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zone{}

// Zone struct for Zone
type Zone struct {
	// id
	Id int32 `json:"id"`
	// ゾーンコード * tk1 東京第1 * tk2 東京第2 * tk3 東京第3 * os1 大阪第1 * os2 大阪第2 * os3 大阪第3 * is1 石狩第1
	Code string `json:"code"`
	// ゾーン名称
	Name string `json:"name"`
	// ローカルネットワーク接続が可能かどうか
	CanUseLocal bool `json:"can_use_local"`
	// ハイブリッド接続が利用可能かどうか
	CanUseHybrid bool `json:"can_use_hybrid"`
}

type _Zone Zone

// NewZone instantiates a new Zone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZone(id int32, code string, name string, canUseLocal bool, canUseHybrid bool) *Zone {
	this := Zone{}
	this.Id = id
	this.Code = code
	this.Name = name
	this.CanUseLocal = canUseLocal
	this.CanUseHybrid = canUseHybrid
	return &this
}

// NewZoneWithDefaults instantiates a new Zone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneWithDefaults() *Zone {
	this := Zone{}
	return &this
}

// GetId returns the Id field value
func (o *Zone) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Zone) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Zone) SetId(v int32) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *Zone) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Zone) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Zone) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *Zone) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Zone) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Zone) SetName(v string) {
	o.Name = v
}

// GetCanUseLocal returns the CanUseLocal field value
func (o *Zone) GetCanUseLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUseLocal
}

// GetCanUseLocalOk returns a tuple with the CanUseLocal field value
// and a boolean to check if the value has been set.
func (o *Zone) GetCanUseLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUseLocal, true
}

// SetCanUseLocal sets field value
func (o *Zone) SetCanUseLocal(v bool) {
	o.CanUseLocal = v
}

// GetCanUseHybrid returns the CanUseHybrid field value
func (o *Zone) GetCanUseHybrid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUseHybrid
}

// GetCanUseHybridOk returns a tuple with the CanUseHybrid field value
// and a boolean to check if the value has been set.
func (o *Zone) GetCanUseHybridOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUseHybrid, true
}

// SetCanUseHybrid sets field value
func (o *Zone) SetCanUseHybrid(v bool) {
	o.CanUseHybrid = v
}

func (o Zone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Zone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	toSerialize["can_use_local"] = o.CanUseLocal
	toSerialize["can_use_hybrid"] = o.CanUseHybrid
	return toSerialize, nil
}

func (o *Zone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"name",
		"can_use_local",
		"can_use_hybrid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZone := _Zone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZone)

	if err != nil {
		return err
	}

	*o = Zone(varZone)

	return err
}

type NullableZone struct {
	value *Zone
	isSet bool
}

func (v NullableZone) Get() *Zone {
	return v.value
}

func (v *NullableZone) Set(val *Zone) {
	v.value = val
	v.isSet = true
}

func (v NullableZone) IsSet() bool {
	return v.isSet
}

func (v *NullableZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZone(val *Zone) *NullableZone {
	return &NullableZone{value: val, isSet: true}
}

func (v NullableZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


