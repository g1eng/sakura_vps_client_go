/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakuravps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Keymap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keymap{}

// Keymap struct for Keymap
type Keymap struct {
	// 指定したいキー配列の名称
	Layout string `json:"layout"`
}

type _Keymap Keymap

// NewKeymap instantiates a new Keymap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeymap(layout string) *Keymap {
	this := Keymap{}
	this.Layout = layout
	return &this
}

// NewKeymapWithDefaults instantiates a new Keymap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeymapWithDefaults() *Keymap {
	this := Keymap{}
	return &this
}

// GetLayout returns the Layout field value
func (o *Keymap) GetLayout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *Keymap) GetLayoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *Keymap) SetLayout(v string) {
	o.Layout = v
}

func (o Keymap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keymap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["layout"] = o.Layout
	return toSerialize, nil
}

func (o *Keymap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"layout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeymap := _Keymap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeymap)

	if err != nil {
		return err
	}

	*o = Keymap(varKeymap)

	return err
}

type NullableKeymap struct {
	value *Keymap
	isSet bool
}

func (v NullableKeymap) Get() *Keymap {
	return v.value
}

func (v *NullableKeymap) Set(val *Keymap) {
	v.value = val
	v.isSet = true
}

func (v NullableKeymap) IsSet() bool {
	return v.isSet
}

func (v *NullableKeymap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeymap(val *Keymap) *NullableKeymap {
	return &NullableKeymap{value: val, isSet: true}
}

func (v NullableKeymap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeymap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


