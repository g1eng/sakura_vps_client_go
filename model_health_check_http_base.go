/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HealthCheckHttpBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheckHttpBase{}

// HealthCheckHttpBase struct for HealthCheckHttpBase
type HealthCheckHttpBase struct {
	// ポート番号
	Port int32 `json:"port"`
	// 監視用HTTPリクエストのHostヘッダ   RFCの定義に基づいて下記の制限をかけています * ラベルは2つ以上必要 * 各ラベルについて   * 利用できる文字     * 半角数字 0～9     * 半角英小文字 a～z     * 半角記号 -   * 両端が-でないこと   * -が2つ以上続かないこと。ただしpunycodeの接頭辞`xn--`を除く   * 下記パターン(RFCなどで予約または禁止されているパターン)と一致しないこと     * isatap     * wpad     * example     * example0～example9 * 最後のラベルについて   * 利用できる文字     * 半角英小文字 a～z   * 下記のパターン(RFC予約済みのDNS名)と一致しないこと     * test     * localhost
	Host NullableString `json:"host"`
	// 監視対象のパス * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 _./~%?=-&
	Path string `json:"path"`
	// ベーシック認証のユーザー名 * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 _.-+!@
	BasicAuthUsername NullableString `json:"basic_auth_username"`
	// ベーシック認証のパスワード * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 !#$%&()*+,-./:<=>?@[]^_`{|}~
	BasicAuthPassword NullableString `json:"basic_auth_password"`
	// 正常と見なすHTTPステータスコード
	Status int32 `json:"status"`
	// チェック間隔(分)
	IntervalMinutes int32 `json:"interval_minutes"`
}

type _HealthCheckHttpBase HealthCheckHttpBase

// NewHealthCheckHttpBase instantiates a new HealthCheckHttpBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheckHttpBase(port int32, host NullableString, path string, basicAuthUsername NullableString, basicAuthPassword NullableString, status int32, intervalMinutes int32) *HealthCheckHttpBase {
	this := HealthCheckHttpBase{}
	this.Port = port
	this.Host = host
	this.Path = path
	this.BasicAuthUsername = basicAuthUsername
	this.BasicAuthPassword = basicAuthPassword
	this.Status = status
	this.IntervalMinutes = intervalMinutes
	return &this
}

// NewHealthCheckHttpBaseWithDefaults instantiates a new HealthCheckHttpBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckHttpBaseWithDefaults() *HealthCheckHttpBase {
	this := HealthCheckHttpBase{}
	return &this
}

// GetPort returns the Port field value
func (o *HealthCheckHttpBase) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *HealthCheckHttpBase) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *HealthCheckHttpBase) SetPort(v int32) {
	o.Port = v
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HealthCheckHttpBase) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheckHttpBase) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *HealthCheckHttpBase) SetHost(v string) {
	o.Host.Set(&v)
}

// GetPath returns the Path field value
func (o *HealthCheckHttpBase) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *HealthCheckHttpBase) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *HealthCheckHttpBase) SetPath(v string) {
	o.Path = v
}

// GetBasicAuthUsername returns the BasicAuthUsername field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HealthCheckHttpBase) GetBasicAuthUsername() string {
	if o == nil || o.BasicAuthUsername.Get() == nil {
		var ret string
		return ret
	}

	return *o.BasicAuthUsername.Get()
}

// GetBasicAuthUsernameOk returns a tuple with the BasicAuthUsername field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheckHttpBase) GetBasicAuthUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasicAuthUsername.Get(), o.BasicAuthUsername.IsSet()
}

// SetBasicAuthUsername sets field value
func (o *HealthCheckHttpBase) SetBasicAuthUsername(v string) {
	o.BasicAuthUsername.Set(&v)
}

// GetBasicAuthPassword returns the BasicAuthPassword field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HealthCheckHttpBase) GetBasicAuthPassword() string {
	if o == nil || o.BasicAuthPassword.Get() == nil {
		var ret string
		return ret
	}

	return *o.BasicAuthPassword.Get()
}

// GetBasicAuthPasswordOk returns a tuple with the BasicAuthPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheckHttpBase) GetBasicAuthPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasicAuthPassword.Get(), o.BasicAuthPassword.IsSet()
}

// SetBasicAuthPassword sets field value
func (o *HealthCheckHttpBase) SetBasicAuthPassword(v string) {
	o.BasicAuthPassword.Set(&v)
}

// GetStatus returns the Status field value
func (o *HealthCheckHttpBase) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HealthCheckHttpBase) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HealthCheckHttpBase) SetStatus(v int32) {
	o.Status = v
}

// GetIntervalMinutes returns the IntervalMinutes field value
func (o *HealthCheckHttpBase) GetIntervalMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalMinutes
}

// GetIntervalMinutesOk returns a tuple with the IntervalMinutes field value
// and a boolean to check if the value has been set.
func (o *HealthCheckHttpBase) GetIntervalMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalMinutes, true
}

// SetIntervalMinutes sets field value
func (o *HealthCheckHttpBase) SetIntervalMinutes(v int32) {
	o.IntervalMinutes = v
}

func (o HealthCheckHttpBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheckHttpBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port
	toSerialize["host"] = o.Host.Get()
	toSerialize["path"] = o.Path
	toSerialize["basic_auth_username"] = o.BasicAuthUsername.Get()
	toSerialize["basic_auth_password"] = o.BasicAuthPassword.Get()
	toSerialize["status"] = o.Status
	toSerialize["interval_minutes"] = o.IntervalMinutes
	return toSerialize, nil
}

func (o *HealthCheckHttpBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
		"host",
		"path",
		"basic_auth_username",
		"basic_auth_password",
		"status",
		"interval_minutes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthCheckHttpBase := _HealthCheckHttpBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHealthCheckHttpBase)

	if err != nil {
		return err
	}

	*o = HealthCheckHttpBase(varHealthCheckHttpBase)

	return err
}

type NullableHealthCheckHttpBase struct {
	value *HealthCheckHttpBase
	isSet bool
}

func (v NullableHealthCheckHttpBase) Get() *HealthCheckHttpBase {
	return v.value
}

func (v *NullableHealthCheckHttpBase) Set(val *HealthCheckHttpBase) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheckHttpBase) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheckHttpBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheckHttpBase(val *HealthCheckHttpBase) *NullableHealthCheckHttpBase {
	return &NullableHealthCheckHttpBase{value: val, isSet: true}
}

func (v NullableHealthCheckHttpBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheckHttpBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


