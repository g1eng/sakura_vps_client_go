/*
さくらのVPS APIドキュメント

Testing ServerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sakura_vps

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/g1eng/sakura_vps_client_go"
)

func Test_sakura_vps_ServerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServerAPIService DeleteServerMonitorings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var serverMonitoringId int32

		httpRes, err := apiClient.ServerAPI.DeleteServerMonitorings(context.Background(), serverId, serverMonitoringId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerInterface(context.Background(), serverId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerInterfaceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerInterfaceList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerLimitation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerLimitation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAPI.GetServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var serverMonitoringId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerMonitoring(context.Background(), serverId, serverMonitoringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerMonitoringHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var serverMonitoringId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerMonitoringHealth(context.Background(), serverId, serverMonitoringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerMonitoringList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerMonitoringList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerVideoDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerVideoDevice(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerVncConsoleKeymap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.GetServerVncConsoleKeymap(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PostServerForceReboot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		httpRes, err := apiClient.ServerAPI.PostServerForceReboot(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PostServerMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PostServerMonitoring(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PostServerMountDisc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		httpRes, err := apiClient.ServerAPI.PostServerMountDisc(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PostServerPowerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		httpRes, err := apiClient.ServerAPI.PostServerPowerOn(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PostServerShutdown", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		httpRes, err := apiClient.ServerAPI.PostServerShutdown(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerInterface(context.Background(), serverId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerIpv4Ptr", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerIpv4Ptr(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerIpv6Ptr", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerIpv6Ptr(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerMonitoring", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var serverMonitoringId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerMonitoring(context.Background(), serverId, serverMonitoringId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerVideoDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerVideoDevice(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService PutServerVncConsoleKeymap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.ServerAPI.PutServerVncConsoleKeymap(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
