/*
さくらのVPS APIドキュメント

Testing NfsServerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sakura_vps_client_go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/g1eng/sakura_vps_client_go"
)

func Test_sakura_vps_client_go_NfsServerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NfsServerAPIService GetNfsServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		resp, httpRes, err := apiClient.NfsServerAPI.GetNfsServer(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService GetNfsServerInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		resp, httpRes, err := apiClient.NfsServerAPI.GetNfsServerInterface(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService GetNfsServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NfsServerAPI.GetNfsServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService GetNfsServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		resp, httpRes, err := apiClient.NfsServerAPI.GetNfsServerPowerStatus(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService PostNfsServerChangeIpv4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		httpRes, err := apiClient.NfsServerAPI.PostNfsServerChangeIpv4(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService PutNfsServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		resp, httpRes, err := apiClient.NfsServerAPI.PutNfsServer(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NfsServerAPIService PutNfsServerInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nfsServerId int32

		resp, httpRes, err := apiClient.NfsServerAPI.PutNfsServerInterface(context.Background(), nfsServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
