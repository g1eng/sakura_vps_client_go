/*
さくらのVPS APIドキュメント

Testing ApiKeyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sakura_vps

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/g1eng/sakura_vps_client_go"
)

func Test_sakura_vps_ApiKeyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApiKeyAPIService DeleteApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId int32

		httpRes, err := apiClient.ApiKeyAPI.DeleteApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService DeleteRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId int32

		httpRes, err := apiClient.ApiKeyAPI.DeleteRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService GetApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId int32

		resp, httpRes, err := apiClient.ApiKeyAPI.GetApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService GetApiKeyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApiKeyAPI.GetApiKeyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService GetPermissionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApiKeyAPI.GetPermissionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService GetRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId int32

		resp, httpRes, err := apiClient.ApiKeyAPI.GetRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService GetRoleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApiKeyAPI.GetRoleList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService PostApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApiKeyAPI.PostApiKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService PostApiKeyRotate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId int32

		resp, httpRes, err := apiClient.ApiKeyAPI.PostApiKeyRotate(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService PostRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApiKeyAPI.PostRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService PutApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId int32

		resp, httpRes, err := apiClient.ApiKeyAPI.PutApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiKeyAPIService PutRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId int32

		resp, httpRes, err := apiClient.ApiKeyAPI.PutRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
