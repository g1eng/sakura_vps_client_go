/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
)

// checks if the ProblemDetails400Errors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetails400Errors{}

// ProblemDetails400Errors 入力値に対するエラーを構造化した情報 (code`invalid`の場合のみ) * `non_field_errors` - リクエスト全体に起因した(単一項目でない)エラー内容 * `*` - 対応した入力項目ごとのエラー内容
type ProblemDetails400Errors struct {
	NonFieldErrors []InvalidParameterDetailInner `json:"non_field_errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProblemDetails400Errors ProblemDetails400Errors

// NewProblemDetails400Errors instantiates a new ProblemDetails400Errors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetails400Errors() *ProblemDetails400Errors {
	this := ProblemDetails400Errors{}
	return &this
}

// NewProblemDetails400ErrorsWithDefaults instantiates a new ProblemDetails400Errors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetails400ErrorsWithDefaults() *ProblemDetails400Errors {
	this := ProblemDetails400Errors{}
	return &this
}

// GetNonFieldErrors returns the NonFieldErrors field value if set, zero value otherwise.
func (o *ProblemDetails400Errors) GetNonFieldErrors() []InvalidParameterDetailInner {
	if o == nil || IsNil(o.NonFieldErrors) {
		var ret []InvalidParameterDetailInner
		return ret
	}
	return o.NonFieldErrors
}

// GetNonFieldErrorsOk returns a tuple with the NonFieldErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetails400Errors) GetNonFieldErrorsOk() ([]InvalidParameterDetailInner, bool) {
	if o == nil || IsNil(o.NonFieldErrors) {
		return nil, false
	}
	return o.NonFieldErrors, true
}

// HasNonFieldErrors returns a boolean if a field has been set.
func (o *ProblemDetails400Errors) HasNonFieldErrors() bool {
	if o != nil && !IsNil(o.NonFieldErrors) {
		return true
	}

	return false
}

// SetNonFieldErrors gets a reference to the given []InvalidParameterDetailInner and assigns it to the NonFieldErrors field.
func (o *ProblemDetails400Errors) SetNonFieldErrors(v []InvalidParameterDetailInner) {
	o.NonFieldErrors = v
}

func (o ProblemDetails400Errors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetails400Errors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NonFieldErrors) {
		toSerialize["non_field_errors"] = o.NonFieldErrors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProblemDetails400Errors) UnmarshalJSON(data []byte) (err error) {
	varProblemDetails400Errors := _ProblemDetails400Errors{}

	err = json.Unmarshal(data, &varProblemDetails400Errors)

	if err != nil {
		return err
	}

	*o = ProblemDetails400Errors(varProblemDetails400Errors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "non_field_errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProblemDetails400Errors struct {
	value *ProblemDetails400Errors
	isSet bool
}

func (v NullableProblemDetails400Errors) Get() *ProblemDetails400Errors {
	return v.value
}

func (v *NullableProblemDetails400Errors) Set(val *ProblemDetails400Errors) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetails400Errors) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetails400Errors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetails400Errors(val *ProblemDetails400Errors) *NullableProblemDetails400Errors {
	return &NullableProblemDetails400Errors{value: val, isSet: true}
}

func (v NullableProblemDetails400Errors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetails400Errors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


