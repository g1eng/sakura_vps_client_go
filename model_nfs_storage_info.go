/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NfsStorageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsStorageInfo{}

// NfsStorageInfo struct for NfsStorageInfo
type NfsStorageInfo struct {
	// ストレージの空き容量（KiB）
	FreeSpaceKib int32 `json:"free_space_kib"`
	// ストレージの使用率
	UsagePercentage int32 `json:"usage_percentage"`
	// ストレージの全容量（KiB）
	CapacityKib int32 `json:"capacity_kib"`
	// ストレージの使用容量（KiB）
	UsageKib int32 `json:"usage_kib"`
}

type _NfsStorageInfo NfsStorageInfo

// NewNfsStorageInfo instantiates a new NfsStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsStorageInfo(freeSpaceKib int32, usagePercentage int32, capacityKib int32, usageKib int32) *NfsStorageInfo {
	this := NfsStorageInfo{}
	this.FreeSpaceKib = freeSpaceKib
	this.UsagePercentage = usagePercentage
	this.CapacityKib = capacityKib
	this.UsageKib = usageKib
	return &this
}

// NewNfsStorageInfoWithDefaults instantiates a new NfsStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsStorageInfoWithDefaults() *NfsStorageInfo {
	this := NfsStorageInfo{}
	return &this
}

// GetFreeSpaceKib returns the FreeSpaceKib field value
func (o *NfsStorageInfo) GetFreeSpaceKib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FreeSpaceKib
}

// GetFreeSpaceKibOk returns a tuple with the FreeSpaceKib field value
// and a boolean to check if the value has been set.
func (o *NfsStorageInfo) GetFreeSpaceKibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSpaceKib, true
}

// SetFreeSpaceKib sets field value
func (o *NfsStorageInfo) SetFreeSpaceKib(v int32) {
	o.FreeSpaceKib = v
}

// GetUsagePercentage returns the UsagePercentage field value
func (o *NfsStorageInfo) GetUsagePercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsagePercentage
}

// GetUsagePercentageOk returns a tuple with the UsagePercentage field value
// and a boolean to check if the value has been set.
func (o *NfsStorageInfo) GetUsagePercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsagePercentage, true
}

// SetUsagePercentage sets field value
func (o *NfsStorageInfo) SetUsagePercentage(v int32) {
	o.UsagePercentage = v
}

// GetCapacityKib returns the CapacityKib field value
func (o *NfsStorageInfo) GetCapacityKib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CapacityKib
}

// GetCapacityKibOk returns a tuple with the CapacityKib field value
// and a boolean to check if the value has been set.
func (o *NfsStorageInfo) GetCapacityKibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityKib, true
}

// SetCapacityKib sets field value
func (o *NfsStorageInfo) SetCapacityKib(v int32) {
	o.CapacityKib = v
}

// GetUsageKib returns the UsageKib field value
func (o *NfsStorageInfo) GetUsageKib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsageKib
}

// GetUsageKibOk returns a tuple with the UsageKib field value
// and a boolean to check if the value has been set.
func (o *NfsStorageInfo) GetUsageKibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageKib, true
}

// SetUsageKib sets field value
func (o *NfsStorageInfo) SetUsageKib(v int32) {
	o.UsageKib = v
}

func (o NfsStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsStorageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["free_space_kib"] = o.FreeSpaceKib
	toSerialize["usage_percentage"] = o.UsagePercentage
	toSerialize["capacity_kib"] = o.CapacityKib
	toSerialize["usage_kib"] = o.UsageKib
	return toSerialize, nil
}

func (o *NfsStorageInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"free_space_kib",
		"usage_percentage",
		"capacity_kib",
		"usage_kib",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNfsStorageInfo := _NfsStorageInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNfsStorageInfo)

	if err != nil {
		return err
	}

	*o = NfsStorageInfo(varNfsStorageInfo)

	return err
}

type NullableNfsStorageInfo struct {
	value *NfsStorageInfo
	isSet bool
}

func (v NullableNfsStorageInfo) Get() *NfsStorageInfo {
	return v.value
}

func (v *NullableNfsStorageInfo) Set(val *NfsStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsStorageInfo(val *NfsStorageInfo) *NullableNfsStorageInfo {
	return &NullableNfsStorageInfo{value: val, isSet: true}
}

func (v NullableNfsStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


