/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwitchExternalConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchExternalConnection{}

// SwitchExternalConnection 接続されている外部接続の情報
type SwitchExternalConnection struct {
	// サービスコード
	ServiceCode string `json:"service_code"`
	// 外部接続方式
	Type string `json:"type"`
	Services []SwitchExternalConnectionServicesInner `json:"services"`
}

type _SwitchExternalConnection SwitchExternalConnection

// NewSwitchExternalConnection instantiates a new SwitchExternalConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchExternalConnection(serviceCode string, type_ string, services []SwitchExternalConnectionServicesInner) *SwitchExternalConnection {
	this := SwitchExternalConnection{}
	this.ServiceCode = serviceCode
	this.Type = type_
	this.Services = services
	return &this
}

// NewSwitchExternalConnectionWithDefaults instantiates a new SwitchExternalConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchExternalConnectionWithDefaults() *SwitchExternalConnection {
	this := SwitchExternalConnection{}
	return &this
}

// GetServiceCode returns the ServiceCode field value
func (o *SwitchExternalConnection) GetServiceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceCode
}

// GetServiceCodeOk returns a tuple with the ServiceCode field value
// and a boolean to check if the value has been set.
func (o *SwitchExternalConnection) GetServiceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceCode, true
}

// SetServiceCode sets field value
func (o *SwitchExternalConnection) SetServiceCode(v string) {
	o.ServiceCode = v
}

// GetType returns the Type field value
func (o *SwitchExternalConnection) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SwitchExternalConnection) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SwitchExternalConnection) SetType(v string) {
	o.Type = v
}

// GetServices returns the Services field value
func (o *SwitchExternalConnection) GetServices() []SwitchExternalConnectionServicesInner {
	if o == nil {
		var ret []SwitchExternalConnectionServicesInner
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *SwitchExternalConnection) GetServicesOk() ([]SwitchExternalConnectionServicesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services, true
}

// SetServices sets field value
func (o *SwitchExternalConnection) SetServices(v []SwitchExternalConnectionServicesInner) {
	o.Services = v
}

func (o SwitchExternalConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchExternalConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_code"] = o.ServiceCode
	toSerialize["type"] = o.Type
	toSerialize["services"] = o.Services
	return toSerialize, nil
}

func (o *SwitchExternalConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_code",
		"type",
		"services",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchExternalConnection := _SwitchExternalConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwitchExternalConnection)

	if err != nil {
		return err
	}

	*o = SwitchExternalConnection(varSwitchExternalConnection)

	return err
}

type NullableSwitchExternalConnection struct {
	value *SwitchExternalConnection
	isSet bool
}

func (v NullableSwitchExternalConnection) Get() *SwitchExternalConnection {
	return v.value
}

func (v *NullableSwitchExternalConnection) Set(val *SwitchExternalConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchExternalConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchExternalConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchExternalConnection(val *SwitchExternalConnection) *NullableSwitchExternalConnection {
	return &NullableSwitchExternalConnection{value: val, isSet: true}
}

func (v NullableSwitchExternalConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchExternalConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


