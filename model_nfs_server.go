/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NfsServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsServer{}

// NfsServer struct for NfsServer
type NfsServer struct {
	// id
	Id int32 `json:"id"`
	// 名前
	Name string `json:"name"`
	// 説明
	Description string `json:"description"`
	// サービス状況 * in_preparation 準備中 * on_trial お試し中 * link_down_on_trial お試し中（一時停止） * in_use 利用中 * link_down 一時停止中
	ServiceStatus string `json:"service_status"`
	// 設定状況 * done 設定完了 * in_update 設定更新中 * failed 設定更新失敗
	SettingStatus string `json:"setting_status"`
	// ストレージ情報
	Storage []NfsServerStorageInner `json:"storage"`
	Zone ServerZone `json:"zone"`
	Ipv4 NfsServerIpv4 `json:"ipv4"`
	Contract NfsServerContract `json:"contract"`
	// 電源ステータス * power_on 電源ON * in_shutdown シャットダウン中 * power_off 電源OFF * unknown 不明（電源状態を取得できない） このエンドポイントが返す電源ステータスはキャッシュされた情報のため、最新の正確な電源ステータスではない場合があります
	PowerStatus string `json:"power_status"`
}

type _NfsServer NfsServer

// NewNfsServer instantiates a new NfsServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsServer(id int32, name string, description string, serviceStatus string, settingStatus string, storage []NfsServerStorageInner, zone ServerZone, ipv4 NfsServerIpv4, contract NfsServerContract, powerStatus string) *NfsServer {
	this := NfsServer{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.ServiceStatus = serviceStatus
	this.SettingStatus = settingStatus
	this.Storage = storage
	this.Zone = zone
	this.Ipv4 = ipv4
	this.Contract = contract
	this.PowerStatus = powerStatus
	return &this
}

// NewNfsServerWithDefaults instantiates a new NfsServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsServerWithDefaults() *NfsServer {
	this := NfsServer{}
	return &this
}

// GetId returns the Id field value
func (o *NfsServer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NfsServer) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *NfsServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NfsServer) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *NfsServer) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NfsServer) SetDescription(v string) {
	o.Description = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *NfsServer) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *NfsServer) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetSettingStatus returns the SettingStatus field value
func (o *NfsServer) GetSettingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingStatus
}

// GetSettingStatusOk returns a tuple with the SettingStatus field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetSettingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingStatus, true
}

// SetSettingStatus sets field value
func (o *NfsServer) SetSettingStatus(v string) {
	o.SettingStatus = v
}

// GetStorage returns the Storage field value
func (o *NfsServer) GetStorage() []NfsServerStorageInner {
	if o == nil {
		var ret []NfsServerStorageInner
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetStorageOk() ([]NfsServerStorageInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage, true
}

// SetStorage sets field value
func (o *NfsServer) SetStorage(v []NfsServerStorageInner) {
	o.Storage = v
}

// GetZone returns the Zone field value
func (o *NfsServer) GetZone() ServerZone {
	if o == nil {
		var ret ServerZone
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetZoneOk() (*ServerZone, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *NfsServer) SetZone(v ServerZone) {
	o.Zone = v
}

// GetIpv4 returns the Ipv4 field value
func (o *NfsServer) GetIpv4() NfsServerIpv4 {
	if o == nil {
		var ret NfsServerIpv4
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetIpv4Ok() (*NfsServerIpv4, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *NfsServer) SetIpv4(v NfsServerIpv4) {
	o.Ipv4 = v
}

// GetContract returns the Contract field value
func (o *NfsServer) GetContract() NfsServerContract {
	if o == nil {
		var ret NfsServerContract
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetContractOk() (*NfsServerContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *NfsServer) SetContract(v NfsServerContract) {
	o.Contract = v
}

// GetPowerStatus returns the PowerStatus field value
func (o *NfsServer) GetPowerStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerStatus
}

// GetPowerStatusOk returns a tuple with the PowerStatus field value
// and a boolean to check if the value has been set.
func (o *NfsServer) GetPowerStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerStatus, true
}

// SetPowerStatus sets field value
func (o *NfsServer) SetPowerStatus(v string) {
	o.PowerStatus = v
}

func (o NfsServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["service_status"] = o.ServiceStatus
	toSerialize["setting_status"] = o.SettingStatus
	toSerialize["storage"] = o.Storage
	toSerialize["zone"] = o.Zone
	toSerialize["ipv4"] = o.Ipv4
	toSerialize["contract"] = o.Contract
	toSerialize["power_status"] = o.PowerStatus
	return toSerialize, nil
}

func (o *NfsServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"service_status",
		"setting_status",
		"storage",
		"zone",
		"ipv4",
		"contract",
		"power_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNfsServer := _NfsServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNfsServer)

	if err != nil {
		return err
	}

	*o = NfsServer(varNfsServer)

	return err
}

type NullableNfsServer struct {
	value *NfsServer
	isSet bool
}

func (v NullableNfsServer) Get() *NfsServer {
	return v.value
}

func (v *NullableNfsServer) Set(val *NfsServer) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsServer) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsServer(val *NfsServer) *NullableNfsServer {
	return &NullableNfsServer{value: val, isSet: true}
}

func (v NullableNfsServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


