/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	// id
	Id int32 `json:"id"`
	// 名前
	Name string `json:"name"`
	// 説明
	Description string `json:"description"`
	// サービスタイプ
	ServiceType string `json:"service_type"`
	// サービス状況 * on_trial お試し中 * link_down_on_trial お試し中（一時停止） * in_use 利用中 * link_down 一時停止中
	ServiceStatus string `json:"service_status"`
	// CPUコア数
	CpuCores int32 `json:"cpu_cores"`
	// メモリ容量(MiB)
	MemoryMebibytes int32 `json:"memory_mebibytes"`
	// ストレージ情報
	Storage []ServerStorageInner `json:"storage"`
	Zone ServerZone `json:"zone"`
	// オプション（追加ソフトウェア）
	Options []string `json:"options"`
	// プランの世代
	Version string `json:"version"`
	Ipv4 ServerIpv4 `json:"ipv4"`
	Ipv6 ServerIpv6 `json:"ipv6"`
	Contract ServerContract `json:"contract"`
	// 電源ステータス * power_on 電源ON * in_shutdown シャットダウン中 * power_off 電源OFF * installing OSインストール中 * in_scaleup スケールアップ中 * migration サーバー移行作業中 * unknown 不明（電源状態を取得できない） このエンドポイントが返す電源ステータスはキャッシュされた情報のため、最新の正確な電源ステータスが必要な場合は **サーバーの電源状態を取得する**`/servers/{server_id}/power-status`をご利用ください
	PowerStatus string `json:"power_status"`
}

type _Server Server

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer(id int32, name string, description string, serviceType string, serviceStatus string, cpuCores int32, memoryMebibytes int32, storage []ServerStorageInner, zone ServerZone, options []string, version string, ipv4 ServerIpv4, ipv6 ServerIpv6, contract ServerContract, powerStatus string) *Server {
	this := Server{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.ServiceType = serviceType
	this.ServiceStatus = serviceStatus
	this.CpuCores = cpuCores
	this.MemoryMebibytes = memoryMebibytes
	this.Storage = storage
	this.Zone = zone
	this.Options = options
	this.Version = version
	this.Ipv4 = ipv4
	this.Ipv6 = ipv6
	this.Contract = contract
	this.PowerStatus = powerStatus
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetId returns the Id field value
func (o *Server) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Server) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Server) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Server) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Server) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Server) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Server) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Server) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Server) SetDescription(v string) {
	o.Description = v
}

// GetServiceType returns the ServiceType field value
func (o *Server) GetServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *Server) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *Server) SetServiceType(v string) {
	o.ServiceType = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *Server) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *Server) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *Server) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetCpuCores returns the CpuCores field value
func (o *Server) GetCpuCores() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value
// and a boolean to check if the value has been set.
func (o *Server) GetCpuCoresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuCores, true
}

// SetCpuCores sets field value
func (o *Server) SetCpuCores(v int32) {
	o.CpuCores = v
}

// GetMemoryMebibytes returns the MemoryMebibytes field value
func (o *Server) GetMemoryMebibytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryMebibytes
}

// GetMemoryMebibytesOk returns a tuple with the MemoryMebibytes field value
// and a boolean to check if the value has been set.
func (o *Server) GetMemoryMebibytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMebibytes, true
}

// SetMemoryMebibytes sets field value
func (o *Server) SetMemoryMebibytes(v int32) {
	o.MemoryMebibytes = v
}

// GetStorage returns the Storage field value
func (o *Server) GetStorage() []ServerStorageInner {
	if o == nil {
		var ret []ServerStorageInner
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *Server) GetStorageOk() ([]ServerStorageInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage, true
}

// SetStorage sets field value
func (o *Server) SetStorage(v []ServerStorageInner) {
	o.Storage = v
}

// GetZone returns the Zone field value
func (o *Server) GetZone() ServerZone {
	if o == nil {
		var ret ServerZone
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *Server) GetZoneOk() (*ServerZone, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *Server) SetZone(v ServerZone) {
	o.Zone = v
}

// GetOptions returns the Options field value
func (o *Server) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *Server) GetOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *Server) SetOptions(v []string) {
	o.Options = v
}

// GetVersion returns the Version field value
func (o *Server) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Server) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Server) SetVersion(v string) {
	o.Version = v
}

// GetIpv4 returns the Ipv4 field value
func (o *Server) GetIpv4() ServerIpv4 {
	if o == nil {
		var ret ServerIpv4
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *Server) GetIpv4Ok() (*ServerIpv4, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *Server) SetIpv4(v ServerIpv4) {
	o.Ipv4 = v
}

// GetIpv6 returns the Ipv6 field value
func (o *Server) GetIpv6() ServerIpv6 {
	if o == nil {
		var ret ServerIpv6
		return ret
	}

	return o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value
// and a boolean to check if the value has been set.
func (o *Server) GetIpv6Ok() (*ServerIpv6, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv6, true
}

// SetIpv6 sets field value
func (o *Server) SetIpv6(v ServerIpv6) {
	o.Ipv6 = v
}

// GetContract returns the Contract field value
func (o *Server) GetContract() ServerContract {
	if o == nil {
		var ret ServerContract
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *Server) GetContractOk() (*ServerContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *Server) SetContract(v ServerContract) {
	o.Contract = v
}

// GetPowerStatus returns the PowerStatus field value
func (o *Server) GetPowerStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerStatus
}

// GetPowerStatusOk returns a tuple with the PowerStatus field value
// and a boolean to check if the value has been set.
func (o *Server) GetPowerStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerStatus, true
}

// SetPowerStatus sets field value
func (o *Server) SetPowerStatus(v string) {
	o.PowerStatus = v
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["service_type"] = o.ServiceType
	toSerialize["service_status"] = o.ServiceStatus
	toSerialize["cpu_cores"] = o.CpuCores
	toSerialize["memory_mebibytes"] = o.MemoryMebibytes
	toSerialize["storage"] = o.Storage
	toSerialize["zone"] = o.Zone
	toSerialize["options"] = o.Options
	toSerialize["version"] = o.Version
	toSerialize["ipv4"] = o.Ipv4
	toSerialize["ipv6"] = o.Ipv6
	toSerialize["contract"] = o.Contract
	toSerialize["power_status"] = o.PowerStatus
	return toSerialize, nil
}

func (o *Server) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"service_type",
		"service_status",
		"cpu_cores",
		"memory_mebibytes",
		"storage",
		"zone",
		"options",
		"version",
		"ipv4",
		"ipv6",
		"contract",
		"power_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServer := _Server{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServer)

	if err != nil {
		return err
	}

	*o = Server(varServer)

	return err
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


