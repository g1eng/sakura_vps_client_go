/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerIpv4{}

// ServerIpv4 struct for ServerIpv4
type ServerIpv4 struct {
	// アドレス
	Address string `json:"address"`
	// サブネットマスク
	Netmask string `json:"netmask"`
	// ゲートウェイのアドレス
	Gateway string `json:"gateway"`
	// ネームサーバーのアドレスリスト
	Nameservers []string `json:"nameservers"`
	// 標準ホスト名
	Hostname string `json:"hostname"`
	// 逆引きホスト名
	Ptr string `json:"ptr"`
}

type _ServerIpv4 ServerIpv4

// NewServerIpv4 instantiates a new ServerIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerIpv4(address string, netmask string, gateway string, nameservers []string, hostname string, ptr string) *ServerIpv4 {
	this := ServerIpv4{}
	this.Address = address
	this.Netmask = netmask
	this.Gateway = gateway
	this.Nameservers = nameservers
	this.Hostname = hostname
	this.Ptr = ptr
	return &this
}

// NewServerIpv4WithDefaults instantiates a new ServerIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerIpv4WithDefaults() *ServerIpv4 {
	this := ServerIpv4{}
	return &this
}

// GetAddress returns the Address field value
func (o *ServerIpv4) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ServerIpv4) SetAddress(v string) {
	o.Address = v
}

// GetNetmask returns the Netmask field value
func (o *ServerIpv4) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *ServerIpv4) SetNetmask(v string) {
	o.Netmask = v
}

// GetGateway returns the Gateway field value
func (o *ServerIpv4) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *ServerIpv4) SetGateway(v string) {
	o.Gateway = v
}

// GetNameservers returns the Nameservers field value
func (o *ServerIpv4) GetNameservers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetNameserversOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nameservers, true
}

// SetNameservers sets field value
func (o *ServerIpv4) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetHostname returns the Hostname field value
func (o *ServerIpv4) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ServerIpv4) SetHostname(v string) {
	o.Hostname = v
}

// GetPtr returns the Ptr field value
func (o *ServerIpv4) GetPtr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ptr
}

// GetPtrOk returns a tuple with the Ptr field value
// and a boolean to check if the value has been set.
func (o *ServerIpv4) GetPtrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ptr, true
}

// SetPtr sets field value
func (o *ServerIpv4) SetPtr(v string) {
	o.Ptr = v
}

func (o ServerIpv4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["netmask"] = o.Netmask
	toSerialize["gateway"] = o.Gateway
	toSerialize["nameservers"] = o.Nameservers
	toSerialize["hostname"] = o.Hostname
	toSerialize["ptr"] = o.Ptr
	return toSerialize, nil
}

func (o *ServerIpv4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"netmask",
		"gateway",
		"nameservers",
		"hostname",
		"ptr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerIpv4 := _ServerIpv4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerIpv4)

	if err != nil {
		return err
	}

	*o = ServerIpv4(varServerIpv4)

	return err
}

type NullableServerIpv4 struct {
	value *ServerIpv4
	isSet bool
}

func (v NullableServerIpv4) Get() *ServerIpv4 {
	return v.value
}

func (v *NullableServerIpv4) Set(val *ServerIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullableServerIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullableServerIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerIpv4(val *ServerIpv4) *NullableServerIpv4 {
	return &NullableServerIpv4{value: val, isSet: true}
}

func (v NullableServerIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


