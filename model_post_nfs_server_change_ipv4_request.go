/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostNfsServerChangeIpv4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostNfsServerChangeIpv4Request{}

// PostNfsServerChangeIpv4Request struct for PostNfsServerChangeIpv4Request
type PostNfsServerChangeIpv4Request struct {
	// ipv4アドレス
	Address string `json:"address"`
	// ネットマスク
	Netmask string `json:"netmask"`
}

type _PostNfsServerChangeIpv4Request PostNfsServerChangeIpv4Request

// NewPostNfsServerChangeIpv4Request instantiates a new PostNfsServerChangeIpv4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostNfsServerChangeIpv4Request(address string, netmask string) *PostNfsServerChangeIpv4Request {
	this := PostNfsServerChangeIpv4Request{}
	this.Address = address
	this.Netmask = netmask
	return &this
}

// NewPostNfsServerChangeIpv4RequestWithDefaults instantiates a new PostNfsServerChangeIpv4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostNfsServerChangeIpv4RequestWithDefaults() *PostNfsServerChangeIpv4Request {
	this := PostNfsServerChangeIpv4Request{}
	return &this
}

// GetAddress returns the Address field value
func (o *PostNfsServerChangeIpv4Request) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PostNfsServerChangeIpv4Request) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PostNfsServerChangeIpv4Request) SetAddress(v string) {
	o.Address = v
}

// GetNetmask returns the Netmask field value
func (o *PostNfsServerChangeIpv4Request) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *PostNfsServerChangeIpv4Request) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *PostNfsServerChangeIpv4Request) SetNetmask(v string) {
	o.Netmask = v
}

func (o PostNfsServerChangeIpv4Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostNfsServerChangeIpv4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["netmask"] = o.Netmask
	return toSerialize, nil
}

func (o *PostNfsServerChangeIpv4Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"netmask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostNfsServerChangeIpv4Request := _PostNfsServerChangeIpv4Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostNfsServerChangeIpv4Request)

	if err != nil {
		return err
	}

	*o = PostNfsServerChangeIpv4Request(varPostNfsServerChangeIpv4Request)

	return err
}

type NullablePostNfsServerChangeIpv4Request struct {
	value *PostNfsServerChangeIpv4Request
	isSet bool
}

func (v NullablePostNfsServerChangeIpv4Request) Get() *PostNfsServerChangeIpv4Request {
	return v.value
}

func (v *NullablePostNfsServerChangeIpv4Request) Set(val *PostNfsServerChangeIpv4Request) {
	v.value = val
	v.isSet = true
}

func (v NullablePostNfsServerChangeIpv4Request) IsSet() bool {
	return v.isSet
}

func (v *NullablePostNfsServerChangeIpv4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostNfsServerChangeIpv4Request(val *PostNfsServerChangeIpv4Request) *NullablePostNfsServerChangeIpv4Request {
	return &NullablePostNfsServerChangeIpv4Request{value: val, isSet: true}
}

func (v NullablePostNfsServerChangeIpv4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostNfsServerChangeIpv4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


