/*
さくらのVPS APIドキュメント

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sakura_vps_client_go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetDiscList200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetDiscList200Response{}

// GetDiscList200Response struct for GetDiscList200Response
type GetDiscList200Response struct {
	// データ総数
	Count int32 `json:"count"`
	// 次のページへのURL
	Next NullableString `json:"next"`
	// 前のページへのURL
	Previous NullableString `json:"previous"`
	Results []Disc `json:"results"`
}

type _GetDiscList200Response GetDiscList200Response

// NewGetDiscList200Response instantiates a new GetDiscList200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDiscList200Response(count int32, next NullableString, previous NullableString, results []Disc) *GetDiscList200Response {
	this := GetDiscList200Response{}
	this.Count = count
	this.Next = next
	this.Previous = previous
	this.Results = results
	return &this
}

// NewGetDiscList200ResponseWithDefaults instantiates a new GetDiscList200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDiscList200ResponseWithDefaults() *GetDiscList200Response {
	this := GetDiscList200Response{}
	return &this
}

// GetCount returns the Count field value
func (o *GetDiscList200Response) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GetDiscList200Response) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *GetDiscList200Response) SetCount(v int32) {
	o.Count = v
}

// GetNext returns the Next field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GetDiscList200Response) GetNext() string {
	if o == nil || o.Next.Get() == nil {
		var ret string
		return ret
	}

	return *o.Next.Get()
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetDiscList200Response) GetNextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Next.Get(), o.Next.IsSet()
}

// SetNext sets field value
func (o *GetDiscList200Response) SetNext(v string) {
	o.Next.Set(&v)
}

// GetPrevious returns the Previous field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GetDiscList200Response) GetPrevious() string {
	if o == nil || o.Previous.Get() == nil {
		var ret string
		return ret
	}

	return *o.Previous.Get()
}

// GetPreviousOk returns a tuple with the Previous field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetDiscList200Response) GetPreviousOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Previous.Get(), o.Previous.IsSet()
}

// SetPrevious sets field value
func (o *GetDiscList200Response) SetPrevious(v string) {
	o.Previous.Set(&v)
}

// GetResults returns the Results field value
func (o *GetDiscList200Response) GetResults() []Disc {
	if o == nil {
		var ret []Disc
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *GetDiscList200Response) GetResultsOk() ([]Disc, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *GetDiscList200Response) SetResults(v []Disc) {
	o.Results = v
}

func (o GetDiscList200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetDiscList200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["next"] = o.Next.Get()
	toSerialize["previous"] = o.Previous.Get()
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *GetDiscList200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"next",
		"previous",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetDiscList200Response := _GetDiscList200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetDiscList200Response)

	if err != nil {
		return err
	}

	*o = GetDiscList200Response(varGetDiscList200Response)

	return err
}

type NullableGetDiscList200Response struct {
	value *GetDiscList200Response
	isSet bool
}

func (v NullableGetDiscList200Response) Get() *GetDiscList200Response {
	return v.value
}

func (v *NullableGetDiscList200Response) Set(val *GetDiscList200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscList200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscList200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscList200Response(val *GetDiscList200Response) *NullableGetDiscList200Response {
	return &NullableGetDiscList200Response{value: val, isSet: true}
}

func (v NullableGetDiscList200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscList200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


